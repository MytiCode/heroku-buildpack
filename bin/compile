#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
# unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants
BUILDPACK_DEBUG="${BUILDPACK_DEBUG:-false}"
BUILDPACK_XTRACE="${BUILDPACK_XTRACE:-false}"
NODE_MODULES_CACHE="${NODE_MODULES_CACHE:-false}"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

HEROKU_INSTALL_DIR="${BUILD_DIR}/.heroku"
NODE_INSTALL_DIR="${HEROKU_INSTALL_DIR}/node"

BUILD_START_EPOCH="$(date +%s)"

### Load dependencies

source "${BP_DIR}/lib/output.sh"
source "${BP_DIR}/lib/environment.sh"
source "${BP_DIR}/lib/failure.sh"
source "${BP_DIR}/lib/binaries.sh"
source "${BP_DIR}/lib/json.sh"
source "${BP_DIR}/lib/cache.sh"
source "${BP_DIR}/lib/dependencies.sh"
source "${BP_DIR}/lib/plugin.sh"

export PATH="${BUILD_DIR}/.heroku/node/bin":$PATH

LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "${LOG_FILE}"

### Handle errors

handle_failure() {
  header "Build failed"
  fail_node_install "${LOG_FILE}" "${BUILD_DIR}"
  fail_invalid_semver "${LOG_FILE}"
  warn_aws_proxy "${BUILD_DIR}"
  warn_missing_devdeps "${LOG_FILE}" "${BUILD_DIR}"
  warn_econnreset "${LOG_FILE}"
  failure_message | output "${LOG_FILE}"
}
trap 'handle_failure' ERR


### Failures that should be caught immediately

fail_prebuilt "${BUILD_DIR}"
fail_no_nx_workspace "${BUILD_DIR}"
fail_dot_heroku "${BUILD_DIR}"
fail_dot_heroku_node "${BUILD_DIR}"
fail_invalid_package_json "${BUILD_DIR}"
fail_multiple_lockfiles "${BUILD_DIR}"
warn_prebuilt_modules "${BUILD_DIR}"
warn_missing_package_json "${BUILD_DIR}"

### Compile

bool_var() {
  case "${!1}" in
    true)
      return 0
      ;;
    false)
      return 1
      ;;
    *)
      echo "parameter: ${1}='${!1}' is not a boolean, expected 'true' or 'false'" >&2
      return 1
      ;;
  esac
}

create_env() {
  write_profile "${BP_DIR}" "${BUILD_DIR}"
  write_export "${BP_DIR}" "${BUILD_DIR}"
  export_env_dir "${ENV_DIR}"
  create_default_env
}

header "Creating runtime environment" | output "${LOG_FILE}"

mkdir -p "${NODE_INSTALL_DIR}"
cd "${BUILD_DIR}"

# can't pipe the whole thing because piping causes subshells, preventing exports
create_env
list_node_config | output "${LOG_FILE}"
create_build_env

if bool_var BUILDPACK_XTRACE; then
  set -o xtrace
fi

install_bins() {
  local node_engine npm_engine yarn_engine npm_version node_version

  node_engine=$(read_json "${BUILD_DIR}/package.json" ".engines.node")
  npm_engine=$(read_json "${BUILD_DIR}/package.json" ".engines.npm")
  pnpm_engine=$(read_json "${BUILD_DIR}/package.json" ".engines.pnpm")

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo "engines.pnpm (package.json):  ${pnpm_engine:-unspecified (use default)}"
  echo ""

  warn_node_engine "$node_engine"

  install_nodejs "$node_engine" "${NODE_INSTALL_DIR}"
  install_npm "$npm_engine" "${NODE_INSTALL_DIR}"
  install_pnpm "$pnpm_engine"
  install_nx
  install_jq
}

header "Installing binaries" | output "${LOG_FILE}"
install_bins | output "${LOG_FILE}"

header "Configuring XDG environment to utilize cache, notably for pnpm" | output "${LOG_FILE}"
(
  export XDG_DATA_HOME="${CACHE_DIR}"
  printf "  \u2713  Set XDG_DATA_HOME to ${CACHE_DIR}\n"
  export XDG_CACHE_HOME="${CACHE_DIR}"
  printf "  \u2713  Set XDG_CACHE_HOME to ${CACHE_DIR}\n"
) | output "${LOG_FILE}"

restore_cache() {
  local cache_status="$(get_cache_status "$CACHE_DIR")"

  if [[ "$cache_status" == "disabled" ]]; then
    header "Restoring cache"
    echo "Caching has been disabled because NODE_MODULES_CACHE=${NODE_MODULES_CACHE}"
  elif [[ "$cache_status" == "valid" ]]; then
    header "Restoring cache"
    restore_default_cache_directories "${BUILD_DIR}" "$CACHE_DIR"
  elif [[ "$cache_status" == "new-signature" ]]; then
    header "Restoring cache"
    echo "Cached directories were not restored due to a change in version of node, npm, pnpm or stack"
    echo "Module installation may take longer for this build"
  else
    # No cache exists, be silent
    :
  fi
}

restore_cache | output "${LOG_FILE}"

build_appliance() {
  (
    cd "${BUILD_DIR}" || return
    echo "Appliance project dependencies: ${APPLIANCE_NX_PROJECTS}"
    nx run-many -t build -p ${APPLIANCE_NX_PROJECTS}
  )
}

header "Installing dependencies" | output "${LOG_FILE}"
pnpm_node_modules "${BUILD_DIR}" | output "${LOG_FILE}"

header "Building appliance"
build_appliance | output "${LOG_FILE}"

cache_build() {
  clear_cache "$CACHE_DIR"
  if bool_var NODE_MODULES_CACHE; then
    # we've already warned that caching is disabled in the restore step
    # so be silent here
    :
  else
    header "Caching build"
    save_default_cache_directories "${BUILD_DIR}" "$CACHE_DIR"
  fi
  save_signature "$CACHE_DIR"
}

cache_build | output "${LOG_FILE}"

DIST_DIR="${BUILD_DIR}/dist"

prepare_distribution() {
  echo " -- Configuring pnpm workspace"
  echo -e "packages:\n  - apps/*" > "${DIST_DIR}/pnpm-workspace.yaml"
  printf "    \u2713  pnpm-workspace.yaml created\n"

  (
    (
      cat "${BUILD_DIR}/package.json" |
        jq '{ name: "dist", version: "0.0.1", pnpm: { overrides: .pnpm.overrides } }' > "${DIST_DIR}/package.json"
    ) || fail
  ) | indent
  printf "    \u2713  distribution package.json created with overrides from root file\n"

  mv "${BUILD_DIR}/.npmrc" "${DIST_DIR}"
  echo "node-linker=hoisted" >> "${DIST_DIR}/.npmrc"
  printf "    \u2713  npmrc file created from root file with node-linker=hoisted appended\n"

  echo " -- Constructing distribution"

  pnpm -C "${DIST_DIR}" install | indent
  printf "    \u2713  link appliance modules\n"

  mv "${PROCFILE}" "${DIST_DIR}"
  printf "    \u2713  move appliance procfile\n"

  mv "${BUILD_DIR}/.profile.d" "${DIST_DIR}"
  printf "    \u2713  move profile scripts\n"

  mv "${HEROKU_INSTALL_DIR}" "${DIST_DIR}"
  printf "    \u2713  move dyno binaries\n"
}

replace_build() {
  rsync $(bool_var BUILDPACK_DEBUG && echo "-v") \
        --archive \
        --inplace \
        --copy-dirlinks \
        --delete-after \
        --whole-file \
        --no-compress \
        --link-dest "${DIST_DIR}/" "${DIST_DIR}/" "${BUILD_DIR}" \
    || fail
}

header "Preparing distribution" | output "${LOG_FILE}"
prepare_distribution | output "${LOG_FILE}"

header "Replace build with distribution" | output "${LOG_FILE}"
replace_build | output "${LOG_FILE}"

install_plugin "${BP_DIR}" "${BUILD_DIR}"

header "Build succeeded!" | output "${LOG_FILE}"

BUILD_END_EPOCH="$(date +%s)"

summarize_build() {
  # Note that this works only because buildpacks timeout after 15 minutes, so we know we don't need to deal with
  # greater time spans.
  echo "  Build Time: $(date +%Mm%Ss -d "1970-01-01 + ${BUILD_END_EPOCH} seconds - ${BUILD_START_EPOCH} seconds")"
  if $NODE_VERBOSE; then
    list_dependencies "${BUILD_DIR}"
  fi
}

summarize_build | output "${LOG_FILE}"

warn_no_start "${BUILD_DIR}"
warn_unmet_dep "${LOG_FILE}"
